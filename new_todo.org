Okay I'll just erase this at the end of each session and write new stuff
into it everytime.

Right now I am:

This is going to be quite a bit of work.

I might need to consider writing an opengl renderer very soon, after the game act 1 demo can get
completed.

I mean until then I should consider multithreading the fucking things.

I mean I could kind of easily render into separate image contexts and we can use OpenGL to speed up some post processing?
Who knows?

(The threading is fortunately only in very select circumstances, as we don't need to split up the rendering into tiles. Infact the only
thing that requires any multithreading is post-processing as it requires a shitton of work. Rendering sprites is relatively cheap all things considered,
although obviously we can use multithreading to speed it up, I won't deem it very necessary...

We'll think about how it should work later. However we're just going to exclusively make post processing the only thing that actually requires multithreading. For
game rendering, since our sprites are extraordinarily small, I'm going to just make a mega texture atlas at load time. (all of the sprites are 16x16, or basically just like that,
and we can just shove as many sprites into that as we want. If we hit a limit of about 4096x4096 on our texture atlas for some reason, I might have to split pages. That's a problem
for the future though. After some game logic is done))

WHEN I'M BACK:
Inventory / Equipment page!

Think of an okay prologue, and once the inventory/equipment
stuff is working enough, we'll move to more combat work!

Then add particle systems! We're going to allocate from a fixed pool, and
have a limited amount. It's not going to be as useful as the particle system from
the previous project, however it's going to be way simpler. I'll try to have similar
effects (Image -> Particles), which should be much easier as our sprites are known
to be much smaller (this is intentional.)

We're going to then work on the basic lighting system. We're going to do lighting in
a similar method to "deferred lighting methods",

Then begin adding objects! Which will be hardcoded in engine unfortunately?


** Might need to move things to more data files
** SDL Mixer Audio
   Too lazy to do real audio mixing (also I don't know how to.)
** Need a normal game UI
** Start writing a GDD
** Add more game "kernel" features
   The core of the game is not done but we're getting closer to
   my revengence
** End Turn
** Also add a game start up script.
** Do we need a world map?
   Probably...
** Draw some new sprites for actors and animals
   Yeah, we need them like now!
** More focused dialogue? Focus on a specific entity
** Weapon and Armor item types
   We need an item equip screen as well, we would also preferably
   draw sprites for each weapon. However, I might avoid that since
   I don't have that capacity...
   
** Party Members
   We need some party member actors, and obviously our new UI
   has to be updated to account for the fact we have new party members.

   Party members will be transferred from their level storage and auto-level?
** Combat First Attacks!
   We need to add ability lists for our characters! They are
   also preferably animated, however that might be a PITA. I might
   have to hard code the animations, I don't have the time to produce
   a full editor UI for animations. So yeah...

   I want it to allow us to have Disgaea Style Animations, so that's
   why I kind of need this to work...

   Each animation is just going to be a unique function. Unfortunately
   that's the best way to do this as animation data otherwise would
   be extraordinarily painful to program in for.

   NOTE the combat is action-points based

   - [ ] Basic Attack!
   - [ ] Skip Turn
   - [ ] Weapon Specific Abilities?! (add Sword, Fist)
     - [ ] Blade Rush    (Sword)
     - [ ] Triple Strike (Fist)

** Fix the word wrap
** Improve the dialogue UI
